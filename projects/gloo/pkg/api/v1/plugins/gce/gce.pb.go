// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/gce/gce.proto

package gce

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for Google Compute Engine Upstreams
// GCE Upstreams represent a set of one or more addressable VM instances with
// a shared set of tags
type UpstreamSpec struct {
	// get endpoints from instances whose labels match this selector
	Selector map[string]string `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// zone in which the instances live
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// the GCP project to which the instances belong
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the port on which the instances are listening
	// create multiple upstreams to support multiple ports
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8b4a5ba9330888, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

func (m *UpstreamSpec) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *UpstreamSpec) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *UpstreamSpec) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpstreamSpec) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "gce.plugins.gloo.solo.io.UpstreamSpec")
	proto.RegisterMapType((map[string]string)(nil), "gce.plugins.gloo.solo.io.UpstreamSpec.SelectorEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/gce/gce.proto", fileDescriptor_5f8b4a5ba9330888)
}

var fileDescriptor_5f8b4a5ba9330888 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x49, 0xa7, 0x8a, 0x8d, 0x16, 0x24, 0x74, 0x11, 0x0a, 0xca, 0xe0, 0x6a, 0x36, 0x26,
	0xf8, 0xb3, 0x10, 0x75, 0x35, 0xe0, 0xc2, 0x9d, 0x4c, 0x71, 0xe3, 0x46, 0xa6, 0x69, 0x88, 0xb1,
	0xe9, 0xdc, 0x90, 0x64, 0x0a, 0xf5, 0x89, 0x7c, 0x2e, 0xf1, 0x41, 0x24, 0x99, 0x51, 0x14, 0x14,
	0x5c, 0x0c, 0x7c, 0x77, 0xee, 0x39, 0xe7, 0x92, 0x83, 0x4b, 0xa5, 0xc3, 0x53, 0x3b, 0x67, 0x02,
	0x56, 0xdc, 0x83, 0x81, 0x63, 0x0d, 0x5c, 0x19, 0x00, 0x6e, 0x1d, 0x3c, 0x4b, 0x11, 0x7c, 0x37,
	0xd5, 0x56, 0xf3, 0xf5, 0x09, 0xb7, 0xa6, 0x55, 0xba, 0xf1, 0x5c, 0x09, 0x19, 0x3f, 0x66, 0x1d,
	0x04, 0x20, 0x34, 0x61, 0xb7, 0x62, 0x51, 0xce, 0x62, 0x12, 0xd3, 0x30, 0x9d, 0x28, 0x50, 0x90,
	0x44, 0x3c, 0x52, 0xa7, 0x3f, 0x7a, 0x47, 0x78, 0xef, 0xde, 0xfa, 0xe0, 0x64, 0xbd, 0x9a, 0x59,
	0x29, 0xc8, 0x1d, 0xde, 0xf1, 0xd2, 0x48, 0x11, 0xc0, 0x51, 0x94, 0x67, 0xc5, 0xee, 0xe9, 0x39,
	0xfb, 0x2b, 0x93, 0x7d, 0x77, 0xb2, 0x59, 0x6f, 0xbb, 0x69, 0x82, 0xdb, 0x54, 0x5f, 0x29, 0x84,
	0xe0, 0xe1, 0x0b, 0x34, 0x92, 0x0e, 0x72, 0x54, 0x8c, 0xaa, 0xc4, 0xe4, 0x00, 0xe3, 0xfe, 0x51,
	0x8f, 0x7a, 0x41, 0xb3, 0xb4, 0x19, 0xf5, 0x7f, 0x6e, 0x17, 0xd1, 0x62, 0xc1, 0x05, 0x3a, 0xcc,
	0x51, 0x31, 0xae, 0x12, 0x4f, 0xaf, 0xf0, 0xf8, 0xc7, 0x05, 0xb2, 0x8f, 0xb3, 0xa5, 0xdc, 0x50,
	0x94, 0xcc, 0x11, 0xc9, 0x04, 0x6f, 0xad, 0x6b, 0xd3, 0x7e, 0x9e, 0xea, 0x86, 0xcb, 0xc1, 0x05,
	0x2a, 0xcb, 0xd7, 0xb7, 0x43, 0xf4, 0x70, 0xfd, 0xbf, 0x82, 0xed, 0x52, 0xfd, 0x52, 0xf2, 0x7c,
	0x3b, 0x35, 0x76, 0xf6, 0x11, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x60, 0x8d, 0x25, 0xa7, 0x01, 0x00,
	0x00,
}

func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Selector) != len(that1.Selector) {
		return false
	}
	for i := range this.Selector {
		if this.Selector[i] != that1.Selector[i] {
			return false
		}
	}
	if this.Zone != that1.Zone {
		return false
	}
	if this.ProjectId != that1.ProjectId {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
