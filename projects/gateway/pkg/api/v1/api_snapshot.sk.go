// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type ApiSnapshot struct {
	Virtualservices VirtualServiceList
	Gateways        GatewayList
}

func (s ApiSnapshot) Clone() ApiSnapshot {
	return ApiSnapshot{
		Virtualservices: s.Virtualservices.Clone(),
		Gateways:        s.Gateways.Clone(),
	}
}

func (s ApiSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashVirtualservices(),
		s.hashGateways(),
	)
}

func (s ApiSnapshot) hashVirtualservices() uint64 {
	return hashutils.HashAll(s.Virtualservices.AsInterfaces()...)
}

func (s ApiSnapshot) hashGateways() uint64 {
	return hashutils.HashAll(s.Gateways.AsInterfaces()...)
}

func (s ApiSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("virtualservices", s.hashVirtualservices()))
	fields = append(fields, zap.Uint64("gateways", s.hashGateways()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type ApiSnapshotStringer struct {
	Version         uint64
	Virtualservices []string
	Gateways        []string
}

func (ss ApiSnapshotStringer) String() string {
	s := fmt.Sprintf("ApiSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Virtualservices %v\n", len(ss.Virtualservices))
	for _, name := range ss.Virtualservices {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Gateways %v\n", len(ss.Gateways))
	for _, name := range ss.Gateways {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s ApiSnapshot) Stringer() ApiSnapshotStringer {
	return ApiSnapshotStringer{
		Version:         s.Hash(),
		Virtualservices: s.Virtualservices.NamespacesDotNames(),
		Gateways:        s.Gateways.NamespacesDotNames(),
	}
}
