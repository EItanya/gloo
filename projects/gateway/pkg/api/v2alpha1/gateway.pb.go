// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gateway/api/v2alpha1/gateway.proto

package v2alpha1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//A gateway describes the routes to upstreams that are reachable via a specific port on the Gateway Proxy itself.
type Gateway struct {
	// if set to false, only use virtual services with no ssl configured.
	// if set to true, only use virtual services with ssl configured.
	Ssl bool `protobuf:"varint,1,opt,name=ssl,proto3" json:"ssl,omitempty"`
	// the bind address the gateway should serve traffic on
	BindAddress string `protobuf:"bytes,3,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// bind ports must not conflict across gateways in a namespace
	BindPort uint32 `protobuf:"varint,4,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// top level plugin configuration for all routes on the gateway
	Plugins *v1.ListenerPlugins `protobuf:"bytes,5,opt,name=plugins,proto3" json:"plugins,omitempty"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata"`
	// Enable ProxyProtocol support for this listener
	UseProxyProto *types.BoolValue `protobuf:"bytes,8,opt,name=use_proxy_proto,json=useProxyProto,proto3" json:"use_proxy_proto,omitempty"`
	// The type of gateway being created
	// HttpGateway creates a listener with an http_connection_manager
	// TcpGateway creates a listener with a tcp proxy filter
	//
	// Types that are valid to be assigned to GatewayType:
	//	*Gateway_HttpGateway
	//	*Gateway_TcpGateway
	GatewayType          isGateway_GatewayType `protobuf_oneof:"GatewayType"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Gateway) Reset()         { *m = Gateway{} }
func (m *Gateway) String() string { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()    {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_685ea0279ecd2520, []int{0}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateway.Unmarshal(m, b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return xxx_messageInfo_Gateway.Size(m)
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

type isGateway_GatewayType interface {
	isGateway_GatewayType()
	Equal(interface{}) bool
}

type Gateway_HttpGateway struct {
	HttpGateway *HttpGateway `protobuf:"bytes,9,opt,name=http_gateway,json=httpGateway,proto3,oneof"`
}
type Gateway_TcpGateway struct {
	TcpGateway *TcpGateway `protobuf:"bytes,10,opt,name=tcp_gateway,json=tcpGateway,proto3,oneof"`
}

func (*Gateway_HttpGateway) isGateway_GatewayType() {}
func (*Gateway_TcpGateway) isGateway_GatewayType()  {}

func (m *Gateway) GetGatewayType() isGateway_GatewayType {
	if m != nil {
		return m.GatewayType
	}
	return nil
}

func (m *Gateway) GetSsl() bool {
	if m != nil {
		return m.Ssl
	}
	return false
}

func (m *Gateway) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *Gateway) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *Gateway) GetPlugins() *v1.ListenerPlugins {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *Gateway) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *Gateway) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *Gateway) GetUseProxyProto() *types.BoolValue {
	if m != nil {
		return m.UseProxyProto
	}
	return nil
}

func (m *Gateway) GetHttpGateway() *HttpGateway {
	if x, ok := m.GetGatewayType().(*Gateway_HttpGateway); ok {
		return x.HttpGateway
	}
	return nil
}

func (m *Gateway) GetTcpGateway() *TcpGateway {
	if x, ok := m.GetGatewayType().(*Gateway_TcpGateway); ok {
		return x.TcpGateway
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Gateway) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Gateway_OneofMarshaler, _Gateway_OneofUnmarshaler, _Gateway_OneofSizer, []interface{}{
		(*Gateway_HttpGateway)(nil),
		(*Gateway_TcpGateway)(nil),
	}
}

func _Gateway_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Gateway)
	// GatewayType
	switch x := m.GatewayType.(type) {
	case *Gateway_HttpGateway:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpGateway); err != nil {
			return err
		}
	case *Gateway_TcpGateway:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpGateway); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Gateway.GatewayType has unexpected type %T", x)
	}
	return nil
}

func _Gateway_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Gateway)
	switch tag {
	case 9: // GatewayType.http_gateway
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpGateway)
		err := b.DecodeMessage(msg)
		m.GatewayType = &Gateway_HttpGateway{msg}
		return true, err
	case 10: // GatewayType.tcp_gateway
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpGateway)
		err := b.DecodeMessage(msg)
		m.GatewayType = &Gateway_TcpGateway{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Gateway_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Gateway)
	// GatewayType
	switch x := m.GatewayType.(type) {
	case *Gateway_HttpGateway:
		s := proto.Size(x.HttpGateway)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Gateway_TcpGateway:
		s := proto.Size(x.TcpGateway)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HttpGateway struct {
	// names of the the virtual services, which contain the actual routes for the gateway
	// if the list is empty, all virtual services will apply to this gateway (with accordance to tls flag above).
	VirtualServices []core.ResourceRef `protobuf:"bytes,1,rep,name=virtual_services,json=virtualServices,proto3" json:"virtual_services"`
	// http level plugin configuration for all routes on the gateway
	Plugins              *v1.HttpListenerPlugins `protobuf:"bytes,2,opt,name=plugins,proto3" json:"plugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HttpGateway) Reset()         { *m = HttpGateway{} }
func (m *HttpGateway) String() string { return proto.CompactTextString(m) }
func (*HttpGateway) ProtoMessage()    {}
func (*HttpGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_685ea0279ecd2520, []int{1}
}
func (m *HttpGateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpGateway.Unmarshal(m, b)
}
func (m *HttpGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpGateway.Marshal(b, m, deterministic)
}
func (m *HttpGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpGateway.Merge(m, src)
}
func (m *HttpGateway) XXX_Size() int {
	return xxx_messageInfo_HttpGateway.Size(m)
}
func (m *HttpGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpGateway.DiscardUnknown(m)
}

var xxx_messageInfo_HttpGateway proto.InternalMessageInfo

func (m *HttpGateway) GetVirtualServices() []core.ResourceRef {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *HttpGateway) GetPlugins() *v1.HttpListenerPlugins {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type TcpGateway struct {
	// Name of the destinations the gateway can route to
	Destinations []*v1.RouteAction `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// tcp level plugin configuration for all routes on the gateway
	Plugins              *v1.TcpListenerPlugins `protobuf:"bytes,2,opt,name=plugins,proto3" json:"plugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TcpGateway) Reset()         { *m = TcpGateway{} }
func (m *TcpGateway) String() string { return proto.CompactTextString(m) }
func (*TcpGateway) ProtoMessage()    {}
func (*TcpGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_685ea0279ecd2520, []int{2}
}
func (m *TcpGateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpGateway.Unmarshal(m, b)
}
func (m *TcpGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpGateway.Marshal(b, m, deterministic)
}
func (m *TcpGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpGateway.Merge(m, src)
}
func (m *TcpGateway) XXX_Size() int {
	return xxx_messageInfo_TcpGateway.Size(m)
}
func (m *TcpGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpGateway.DiscardUnknown(m)
}

var xxx_messageInfo_TcpGateway proto.InternalMessageInfo

func (m *TcpGateway) GetDestinations() []*v1.RouteAction {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *TcpGateway) GetPlugins() *v1.TcpListenerPlugins {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func init() {
	proto.RegisterType((*Gateway)(nil), "gateway.solo.io.Gateway")
	proto.RegisterType((*HttpGateway)(nil), "gateway.solo.io.HttpGateway")
	proto.RegisterType((*TcpGateway)(nil), "gateway.solo.io.TcpGateway")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gateway/api/v2alpha1/gateway.proto", fileDescriptor_685ea0279ecd2520)
}

var fileDescriptor_685ea0279ecd2520 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x4e, 0xd4, 0x40,
	0x14, 0xa5, 0xb0, 0xc2, 0x32, 0x85, 0x80, 0x13, 0x42, 0xca, 0xa2, 0xb0, 0xec, 0xd3, 0x3e, 0x68,
	0x1b, 0xf0, 0x41, 0x5c, 0xa3, 0x86, 0xf5, 0x01, 0x62, 0x34, 0xd9, 0x14, 0xe2, 0x83, 0x2f, 0x9b,
	0xd9, 0xee, 0x6c, 0x77, 0xa4, 0xec, 0x9d, 0xcc, 0xdc, 0x82, 0xbc, 0x92, 0x18, 0xff, 0xc0, 0x6f,
	0xf0, 0x53, 0xfc, 0x0a, 0x1e, 0xfc, 0x03, 0xfc, 0x02, 0xd3, 0xe9, 0x94, 0xa5, 0x28, 0x71, 0x79,
	0x6a, 0xef, 0xcc, 0x39, 0xe7, 0x9e, 0xde, 0x7b, 0x52, 0xf2, 0x36, 0x16, 0x38, 0x4c, 0x7b, 0x7e,
	0x04, 0x27, 0x81, 0x86, 0x04, 0x9e, 0x0a, 0x08, 0xe2, 0x04, 0x20, 0x90, 0x0a, 0x3e, 0xf3, 0x08,
	0x75, 0x10, 0x33, 0xe4, 0x67, 0xec, 0x3c, 0x60, 0x52, 0x04, 0xa7, 0x3b, 0x2c, 0x91, 0x43, 0xb6,
	0x5d, 0x1c, 0xfa, 0x52, 0x01, 0x02, 0x5d, 0x2a, 0xca, 0x4c, 0xc1, 0x17, 0x50, 0x5b, 0x89, 0x21,
	0x06, 0x73, 0x17, 0x64, 0x6f, 0x39, 0xac, 0xb6, 0x11, 0x03, 0xc4, 0x09, 0x0f, 0x4c, 0xd5, 0x4b,
	0x07, 0xc1, 0x99, 0x62, 0x52, 0x72, 0xa5, 0xed, 0xfd, 0xf6, 0x3f, 0xbc, 0x98, 0xe7, 0xb1, 0xc0,
	0xbc, 0xfd, 0x76, 0x70, 0xc2, 0x91, 0xf5, 0x19, 0x32, 0x4b, 0x09, 0x26, 0xa0, 0x68, 0x64, 0x98,
	0x16, 0x3d, 0x9e, 0x4c, 0x40, 0x50, 0x7c, 0x70, 0x0f, 0x47, 0x45, 0x6d, 0x29, 0xbb, 0xff, 0x1f,
	0x68, 0x56, 0x59, 0xb2, 0x54, 0xf0, 0xc5, 0x4e, 0xb1, 0xd6, 0xba, 0x1f, 0x33, 0x49, 0x63, 0x31,
	0xb2, 0x9f, 0xd5, 0xf8, 0x5a, 0x21, 0x73, 0xfb, 0xf9, 0x12, 0xe8, 0x32, 0x99, 0xd1, 0x3a, 0xf1,
	0x9c, 0xba, 0xd3, 0xac, 0x86, 0xd9, 0x2b, 0xdd, 0x22, 0x0b, 0x3d, 0x31, 0xea, 0x77, 0x59, 0xbf,
	0xaf, 0xb8, 0xd6, 0xde, 0x4c, 0xdd, 0x69, 0xce, 0x87, 0x6e, 0x76, 0xb6, 0x97, 0x1f, 0xd1, 0x75,
	0x32, 0x6f, 0x20, 0x12, 0x14, 0x7a, 0x95, 0xba, 0xd3, 0x5c, 0x0c, 0xab, 0xd9, 0x41, 0x07, 0x14,
	0xd2, 0xe7, 0x64, 0xce, 0xb6, 0xf3, 0x1e, 0xd4, 0x9d, 0xa6, 0xbb, 0xf3, 0xd8, 0xcf, 0xac, 0x14,
	0xeb, 0xf6, 0xdf, 0x0b, 0x8d, 0x7c, 0xc4, 0x55, 0x27, 0x07, 0x85, 0x05, 0x9a, 0xee, 0x93, 0xd9,
	0x7c, 0xfa, 0xde, 0xac, 0xe1, 0xad, 0xf8, 0x11, 0x28, 0x7e, 0xcd, 0x3b, 0x34, 0x77, 0xed, 0xb5,
	0x9f, 0x97, 0x9b, 0x53, 0xbf, 0x2f, 0x37, 0x1f, 0x22, 0xd7, 0xd8, 0x17, 0x83, 0x41, 0xab, 0x21,
	0xe2, 0x11, 0x28, 0xde, 0x08, 0x2d, 0x9d, 0xee, 0x92, 0x6a, 0xb1, 0x79, 0x6f, 0xce, 0x48, 0xad,
	0x96, 0xa5, 0x3e, 0xd8, 0xdb, 0x76, 0x25, 0x13, 0x0b, 0xaf, 0xd1, 0xb4, 0x4d, 0x96, 0x52, 0xcd,
	0xbb, 0x66, 0xd0, 0x5d, 0x33, 0x2c, 0xaf, 0x6a, 0x04, 0x6a, 0x7e, 0x1e, 0x47, 0xbf, 0x88, 0xa3,
	0xdf, 0x06, 0x48, 0x3e, 0xb2, 0x24, 0xe5, 0xe1, 0x62, 0xaa, 0x79, 0x27, 0x63, 0x74, 0x4c, 0xbe,
	0xf7, 0xc8, 0xc2, 0x10, 0x51, 0x76, 0x6d, 0xcc, 0xbd, 0x79, 0x23, 0xf0, 0xc8, 0xbf, 0x15, 0x7b,
	0xff, 0x00, 0x51, 0xda, 0x2d, 0x1c, 0x4c, 0x85, 0xee, 0x70, 0x5c, 0xd2, 0xd7, 0xc4, 0xc5, 0x68,
	0xac, 0x40, 0x8c, 0xc2, 0xfa, 0x5f, 0x0a, 0x47, 0xd1, 0x0d, 0x01, 0x82, 0xd7, 0x55, 0x6b, 0xf5,
	0xe2, 0xaa, 0x52, 0x21, 0xd3, 0xf1, 0xd9, 0xc5, 0x55, 0x85, 0xd0, 0xaa, 0xe5, 0xe9, 0xf6, 0x22,
	0x71, 0x2d, 0xe4, 0xe8, 0x5c, 0xf2, 0xc6, 0x77, 0x87, 0xb8, 0x37, 0x5c, 0xd0, 0x77, 0x64, 0xf9,
	0x54, 0x28, 0x4c, 0x59, 0xd2, 0xd5, 0x5c, 0x9d, 0x8a, 0x88, 0x6b, 0xcf, 0xa9, 0xcf, 0x34, 0xdd,
	0x9d, 0xb5, 0xf2, 0xfc, 0x42, 0xae, 0x21, 0x55, 0x11, 0x0f, 0xf9, 0xc0, 0x8e, 0x70, 0xc9, 0x12,
	0x0f, 0x2d, 0x8f, 0xbe, 0x1c, 0xa7, 0x60, 0xda, 0xd8, 0xdf, 0x2a, 0xa7, 0x20, 0xeb, 0x7b, 0x57,
	0x12, 0x1a, 0xdf, 0x1c, 0x42, 0xc6, 0x1f, 0x47, 0x5f, 0x91, 0x85, 0x3e, 0xd7, 0x28, 0x46, 0x0c,
	0x05, 0x8c, 0xc6, 0x9e, 0x4a, 0x82, 0x21, 0xa4, 0xc8, 0xf7, 0xa2, 0x0c, 0x11, 0x96, 0xe0, 0xb4,
	0x75, 0xdb, 0x4a, 0xbd, 0xcc, 0x3c, 0x8a, 0xee, 0x74, 0xd2, 0x7e, 0xf3, 0xe3, 0xd7, 0x86, 0xf3,
	0xe9, 0xc5, 0xc4, 0xff, 0x3d, 0x79, 0x1c, 0x97, 0xfe, 0x7d, 0xbd, 0x59, 0x13, 0x98, 0x67, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x76, 0x56, 0x11, 0x95, 0x3b, 0x05, 0x00, 0x00,
}

func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ssl != that1.Ssl {
		return false
	}
	if this.BindAddress != that1.BindAddress {
		return false
	}
	if this.BindPort != that1.BindPort {
		return false
	}
	if !this.Plugins.Equal(that1.Plugins) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.UseProxyProto.Equal(that1.UseProxyProto) {
		return false
	}
	if that1.GatewayType == nil {
		if this.GatewayType != nil {
			return false
		}
	} else if this.GatewayType == nil {
		return false
	} else if !this.GatewayType.Equal(that1.GatewayType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Gateway_HttpGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway_HttpGateway)
	if !ok {
		that2, ok := that.(Gateway_HttpGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpGateway.Equal(that1.HttpGateway) {
		return false
	}
	return true
}
func (this *Gateway_TcpGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway_TcpGateway)
	if !ok {
		that2, ok := that.(Gateway_TcpGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpGateway.Equal(that1.TcpGateway) {
		return false
	}
	return true
}
func (this *HttpGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpGateway)
	if !ok {
		that2, ok := that.(HttpGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if !this.VirtualServices[i].Equal(&that1.VirtualServices[i]) {
			return false
		}
	}
	if !this.Plugins.Equal(that1.Plugins) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TcpGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpGateway)
	if !ok {
		that2, ok := that.(TcpGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !this.Plugins.Equal(that1.Plugins) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
